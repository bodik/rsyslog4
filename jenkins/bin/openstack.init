#!/bin/sh

. /puppet/metalib/bin/lib.sh

. /dev/shm/config
. /dev/shm/credentials

if [ -z ${VMNAME} ]; then
	VMNAME="RS"
fi


vm_list() {
	openstack server list $@
}

vm_status() {
	openstack server show --format shell ${VMNAME} | grep -q 'status="ACTIVE"'
}

vm_ip() {
	TMPVMIP=$(openstack server show --column addresses --format value ${VMNAME})
	if [ $? -ne 0 ]; then
		rreturn 1 "ip not detected (get)"
	fi
	VMIP=$(echo ${TMPVMIP} | awk '{print $2}')
	if [ -z "${VMIP}" ]; then
		rreturn 1 "ip not detected (parse)"
	fi
	echo ${VMIP}
}


vm_build() {
	openstack.init shutdown
	openstack.init destroy

	openstack volume create --image "debian-10-x86_64" --size 40 ${VMNAME}
	openstack server create --flavor "standard.medium" --volume ${VMNAME} --key-name ${CLOUD_KEYID} --security-group default --network ${CLOUD_NETWORK} --wait ${VMNAME}
	if [ $? -ne 0 ]; then
		rreturn 1 "$0 build failed to create server"
	fi

	FLOAT_IP=$(openstack floating ip create --description ${VMNAME} --column floating_ip_address --format value ${CLOUD_NETWORK_FP_POOL})
	openstack server add floating ip ${VMNAME} ${FLOAT_IP}
	for i in `seq 1 10`; do
		openstack.init ip 1>/dev/null && break
		sleep 1
	done
	VMIP=$(openstack.init ip) || rreturn 1 "$0 build"
	VMHOSTNAME=$(host -t A ${VMIP} | rev | awk '{print $1}' | rev | sed 's/\.$//')

	for i in `seq 1 300`; do
		ssh -i ${SSHKEY} -o 'StrictHostKeyChecking=no' -o 'UserKnownHostsFile=/dev/null' -o 'ConnectTimeout=5' debian@${VMIP} '/bin/true'
		if [ $? -eq 0 ]; then
			ssh -i ${SSHKEY} -o 'StrictHostKeyChecking=no' -o 'UserKnownHostsFile=/dev/null' -o 'ConnectTimeout=5' debian@${VMIP} "sudo cp ~/.ssh/authorized_keys /root/.ssh/authorized_keys; sudo hostname ${VMHOSTNAME}"
			rreturn 0 "$0 build"
		else
			echo "INFO: vm start wait"
			sleep 5
		fi
	done
	rreturn 1 "$0 build start failed"
}

vm_start() {
	openstack server start ${VMNAME}

	for i in `seq 1 300`; do
		openstack.init ssh '/bin/true'
		if [ $? -eq 0 ]; then
			rreturn 0 "$0 start"
		else
			echo "INFO: vm start wait"
			sleep 5
		fi
	done

	rreturn 1 "$0 start failed"
}

vm_ssh() {
	VMIP=$(openstack.init ip) || rreturn 1 "$0 ssh"
	ssh -i ${SSHKEY} -o 'StrictHostKeyChecking=no' -o 'UserKnownHostsFile=/dev/null' -o 'ConnectTimeout=5' -o 'LogLevel=quiet' root@${VMIP} $@
	rreturn $? "$0 ssh $@"
}


vm_shutdown() {
	openstack server stop ${VMNAME}

	echo "INFO: sending poweroff"
	timeout 60 openstack.init ssh 'poweroff'
	# poweroff returns 1, so we cannot wait for 0 to checkt it's success ;(

	for i in `seq 1 60`; do
		openstack.init status
		if [ $? -eq 1 ]; then
			rreturn 0 "$0 shutdown"
		fi
		echo "INFO: vm shutdown wait"
		sleep 5
	done

	rreturn 1 "shutdown did not finished in time"
}

vm_destroy() {
	VMIP=$(openstack.init ip) || rreturn 1 "$0 destroy"
	openstack server remove floating ip ${VMNAME} ${VMIP}
	openstack floating ip delete ${VMIP}
	openstack server delete --wait ${VMNAME}
	openstack volume delete ${VMNAME}
}


case "$1" in
	list)
		shift
		vm_list $@
	;;

	status)
		vm_status
	;;

	ip)
		vm_ip
	;;

	build)
		shift
		vm_build $@
	;;

	start)
		vm_start
	;;

	ssh)
		shift
		vm_ssh $@
	;;

	ssh_multi)
		shift
		SELECTOR="$1"; shift

		for all in $(openstack.init list -f value -c Name | grep "${SELECTOR}"); do
			VMNAME=$all openstack.init ssh $@ &
		done
		wait
	;;

	shutdown)
		vm_shutdown
	;;

	destroy)
		vm_destroy
	;;


	*)
		rreturn 1 "$0 wrong command"
	;;
esac
